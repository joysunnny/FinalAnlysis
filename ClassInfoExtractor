import com.fasterxml.jackson.databind.ObjectMapper;
import spoon.Launcher;
import spoon.reflect.CtModel;
import spoon.reflect.declaration.CtClass;
import spoon.reflect.declaration.CtField;
import spoon.reflect.declaration.CtMethod;
import spoon.reflect.declaration.CtType;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

public class ClassInfoExtractor {
    public static void main(String[] args) throws Exception {
        Launcher launcher = new Launcher();
        launcher.addInputResource("src/main/java"); // your source directory
        launcher.buildModel();

        CtModel model = launcher.getModel();
        List<ClassInfo> classes = new ArrayList<>();

        for (CtType<?> type : model.getAllTypes()) {
            if (type instanceof CtClass) {
                CtClass<?> ctClass = (CtClass<?>) type;

                ClassInfo classInfo = new ClassInfo();
                classInfo.setClassName(ctClass.getQualifiedName());

                // Fields
                for (CtField<?> field : ctClass.getFields()) {
                    classInfo.getFields().add(new FieldInfo(
                            field.getSimpleName(),
                            field.getType().toString()
                    ));
                }

                // Methods
                for (CtMethod<?> method : ctClass.getMethods()) {
                    MethodInfo methodInfo = new MethodInfo();
                    methodInfo.setName(method.getSimpleName());
                    methodInfo.setReturnType(method.getType().toString());

                    method.getParameters().forEach(param ->
                            methodInfo.getParameters().add(new ParameterInfo(
                                    param.getSimpleName(),
                                    param.getType().toString()
                            ))
                    );

                    classInfo.getMethods().add(methodInfo);
                }

                classes.add(classInfo);
            }
        }

        // Convert to JSON
        ObjectMapper mapper = new ObjectMapper();
        mapper.writerWithDefaultPrettyPrinter().writeValue(new File("class-info.json"), classes);

        // Print to console
        System.out.println(mapper.writerWithDefaultPrettyPrinter().writeValueAsString(classes));
    }
}
