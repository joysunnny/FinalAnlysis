import com.fasterxml.jackson.databind.ObjectMapper;
import spoon.Launcher;
import spoon.reflect.CtModel;
import spoon.reflect.declaration.*;

import java.io.File;
import java.util.*;

public class ClassHierarchyExtractor {

    private static final Set<String> SPRING_BEAN_ANNOTATIONS =
            Set.of("Service", "Repository", "Component");

    public static void main(String[] args) throws Exception {
        Launcher launcher = new Launcher();
        launcher.addInputResource("src/main/java");
        launcher.buildModel();

        CtModel model = launcher.getModel();

        Map<String, CtClass<?>> classMap = new HashMap<>();
        model.getAllTypes().forEach(t -> {
            if (t instanceof CtClass) {
                classMap.put(t.getQualifiedName(), (CtClass<?>) t);
            }
        });

        List<ClassHierarchyInfo> results = new ArrayList<>();

        for (CtClass<?> ctClass : classMap.values()) {
            results.add(extractClassHierarchy(ctClass, classMap));
        }

        // Write JSON
        ObjectMapper mapper = new ObjectMapper();
        mapper.writerWithDefaultPrettyPrinter().writeValue(new File("class-hierarchy.json"), results);

        // Print to console
        System.out.println(mapper.writerWithDefaultPrettyPrinter().writeValueAsString(results));
    }

    private static ClassHierarchyInfo extractClassHierarchy(CtClass<?> ctClass, Map<String, CtClass<?>> classMap) {
        ClassHierarchyInfo classInfo = new ClassHierarchyInfo();
        classInfo.setClassName(ctClass.getQualifiedName());

        // Fields
        for (CtField<?> field : ctClass.getFields()) {
            boolean isAutowired = field.getAnnotations().stream()
                    .anyMatch(a -> a.getAnnotationType().getSimpleName().equals("Autowired"));

            FieldInfo fieldInfo = new FieldInfo(field.getSimpleName(), field.getType().toString(), isAutowired);
            classInfo.getFields().add(fieldInfo);

            // If autowired, check dependency
            if (isAutowired) {
                String dependencyType = field.getType().toString();
                CtClass<?> dependencyClass = classMap.get(dependencyType);
                if (dependencyClass != null && hasSpringBeanAnnotation(dependencyClass)) {
                    // Extract dependency methods as Level 1
                    classInfo.getLevel1Dependencies().add(extractDependency(dependencyClass));
                }
            }
        }

        // Methods
        for (CtMethod<?> method : ctClass.getMethods()) {
            MethodInfo methodInfo = new MethodInfo();
            methodInfo.setName(method.getSimpleName());
            methodInfo.setReturnType(method.getType().toString());
            if (method.getBody() != null) {
                methodInfo.setBody(method.getBody().toString());
            }
            method.getParameters().forEach(p ->
                    methodInfo.getParameters().add(new ParameterInfo(p.getSimpleName(), p.getType().toString())));
            classInfo.getMethods().add(methodInfo);
        }

        return classInfo;
    }

    private static boolean hasSpringBeanAnnotation(CtClass<?> ctClass) {
        return ctClass.getAnnotations().stream()
                .anyMatch(a -> SPRING_BEAN_ANNOTATIONS.contains(a.getAnnotationType().getSimpleName()));
    }

    private static ClassHierarchyInfo extractDependency(CtClass<?> dependencyClass) {
        ClassHierarchyInfo depInfo = new ClassHierarchyInfo();
        depInfo.setClassName(dependencyClass.getQualifiedName());

        for (CtMethod<?> method : dependencyClass.getMethods()) {
            MethodInfo methodInfo = new MethodInfo();
            methodInfo.setName(method.getSimpleName());
            methodInfo.setReturnType(method.getType().toString());
            if (method.getBody() != null) {
                methodInfo.setBody(method.getBody().toString());
            }
            method.getParameters().forEach(p ->
                    methodInfo.getParameters().add(new ParameterInfo(p.getSimpleName(), p.getType().toString())));
            depInfo.getMethods().add(methodInfo);
        }

        return depInfo;
    }
}
